// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Currency {
  id        Int       @id @default(autoincrement())
  symbol    String    @db.VarChar(5)
  name      String    @db.VarChar(255)
  balance   Int     
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Vouchers      Voucher[]   @relation("Vouchers")
  Transactions  Transaction @relation("Transactions")
}

model User {
  id              Int      @id @default(autoincrement())
  merchant_id     Int 
  first_name      String   @db.VarChar(255)
  last_name       String   @db.VarChar(255)
  email           String   @db.VarChar(255) @unique
  phone           String?
  region          String?
  password_hash   String   @db.VarChar(255)
  role            String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  merchant        Merchant @relation(fields: [merchant_id], references: [id])
}

model Merchant {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  email       String?  
  phone       String?
  region      String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Vouchers    Voucher[]     @relation("Vouchers")
}

model Account {
  id            Int      @id @default(autoincrement())
  user_id       Int
  merchant_id   Int
  currency_id   Int
  balance       Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  merchant      Merchant @relation(fields: [merchant_id], references: [id])
  user          User @relation(fields: [user_id], references: [id])
  curency       Currency @relation(fields: [currency_id], references: [id])

  Transactions  Transaction[] @relation("Transactions")
  Claimed_Vouchers      Voucher[]     @relation("Vouchers")
}

model Transaction {
  id                  Int     @id @default(autoincrement())
  sender_account_id   Int
  receiver_account_id Int
  amount              Int
  currency_id         Int
  transaction_type    String   @db.VarChar(20)
  status              String   @db.VarChar(20)
  description         String   @db.VarChar(255)
  created_at          DateTime @default(now())

  sender_account      Account  @relation("Sender", fields: [sender_account_id], references: [id])
  receiver_account    Account  @relation("Receiver", fields: [receiver_account_id], references: [id])
  currency            Currency @relation(fields: [currency_id], references: [id])
}

model Voucher {
  id                  Int     @id @default(autoincrement())
  code                String   @db.VarChar(20)
  currency_id         Int
  amount              Int
  expiration          DateTime
  status              String   @db.VarChar(20)
  claimed_account_id  Int?
  created_at          DateTime @default(now())
  claimed_at          DateTime? @default(now())

  currency            Currency @relation(fields: [currency_id], references: [id])
  claimed_account     Account  @relation(fields: [claimed_account_id], references: [id])
}
