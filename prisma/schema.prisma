// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Currency {
  id        Int      @id @default(autoincrement())
  symbol    String   @db.VarChar(5)
  name      String   @db.VarChar(255)
  balance   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Vouchers     Voucher[]     @relation("Vouchers")
  Transactions Transaction[] @relation("Transactions")
  Account      Account[]
}

model User {
  id           Int      @id @default(autoincrement())
  merchantId   Int?
  firstName    String   @db.VarChar(255)
  lastName     String   @db.VarChar(255)
  email        String   @unique @db.VarChar(255)
  phone        String?
  region       String?
  passwordHash String   @db.VarChar(255)
  role         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Account  Account[]
  Merchant Merchant? @relation(fields: [merchantId], references: [id])
}

model Merchant {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String?
  phone     String?
  region    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User[]
  Account Account[]
}

model Account {
  id         Int      @id @default(autoincrement())
  userId     Int
  merchantId Int
  currencyId Int
  balance    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Merchant Merchant @relation(fields: [merchantId], references: [id])
  User     User     @relation(fields: [userId], references: [id])
  Currency Currency @relation(fields: [currencyId], references: [id])

  TransactionsBySender   Transaction[] @relation("TransactionsBySender")
  TransactionsByRecieved Transaction[] @relation("TransactionsByRecieved")
  Vouchers               Voucher[]     @relation("ClaimedAccount")
}

model Transaction {
  id                Int      @id @default(autoincrement())
  senderAccountId   Int
  receiverAccountId Int
  amount            Int
  currencyId        Int
  transactionType   String   @db.VarChar(20)
  status            String   @db.VarChar(20)
  description       String   @db.VarChar(255)
  createdAt         DateTime @default(now())

  SenderAccount   Account  @relation("TransactionsBySender", fields: [senderAccountId], references: [id])
  ReceiverAccount Account  @relation("TransactionsByRecieved", fields: [receiverAccountId], references: [id])
  Currency        Currency @relation("Transactions", fields: [currencyId], references: [id])
}

model Voucher {
  id               Int       @id @default(autoincrement())
  code             String    @db.VarChar(20)
  currencyId       Int
  amount           Int
  expiration       DateTime
  status           String    @db.VarChar(20)
  claimedAccountId Int?
  createdAt        DateTime  @default(now())
  claimedAt        DateTime? @default(now())

  Currency       Currency @relation("Vouchers", fields: [currencyId], references: [id])
  ClaimedAccount Account? @relation("ClaimedAccount", fields: [claimedAccountId], references: [id])
}
