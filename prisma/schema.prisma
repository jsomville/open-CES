// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Currency {
  id         Int      @id @default(autoincrement())
  symbol     String   @unique @db.VarChar(5)
  name       String   @unique @db.VarChar(255)
  balance    Decimal  @default(0) @db.Decimal(10, 2)
  country    String   @default("") @db.VarChar(5)
  accountMax Int      @default(100) @map("account_max")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  Vouchers     Voucher[]     @relation("Vouchers")
  Transactions Transaction[] @relation("Transactions")
  Account      Account[]
}

model User {
  id           Int      @id @default(autoincrement())
  merchantId   Int?     @map("merchant_id")
  firstname    String   @db.VarChar(255)
  lastname     String   @db.VarChar(255)
  email        String   @unique @db.VarChar(255)
  phone        String   @unique @db.VarChar(15)
  region       String
  passwordHash String   @map("password_hash") @db.VarChar(255)
  role         String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  isActive     Boolean  @default(false)

  Account  Account[]
  Merchant Merchant? @relation(fields: [merchantId], references: [id])
}

model Merchant {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String?
  phone     String?
  region    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User    User[]
  Account Account[]
}

model Account {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  merchantId  Int?     @map("merchant_id")
  currencyId  Int      @map("currency_id")
  accountType Int      @default(0) @map("account_type")
  balance     Decimal  @default(0) @db.Decimal(10, 2)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  Merchant Merchant[]
  User     User       @relation(fields: [userId], references: [id])
  Currency Currency   @relation(fields: [currencyId], references: [id])

  TransactionsBySender   Transaction[] @relation("TransactionsBySender")
  TransactionsByRecieved Transaction[] @relation("TransactionsByRecieved")
  Vouchers               Voucher[]     @relation("ClaimedAccount")
}

model Transaction {
  id                Int      @id @default(autoincrement())
  senderAccountId   Int      @map("sender_account_id")
  receiverAccountId Int      @map("receiver_account_id")
  amount            Decimal  @db.Decimal(10, 2)
  currencyId        Int      @map("currency_id")
  transactionType   String   @map("transaction_type") @db.VarChar(20)
  status            String   @db.VarChar(20)
  description       String?  @db.VarChar(255)
  createdAt         DateTime @default(now()) @map("created_at")

  SenderAccount   Account  @relation("TransactionsBySender", fields: [senderAccountId], references: [id])
  ReceiverAccount Account  @relation("TransactionsByRecieved", fields: [receiverAccountId], references: [id])
  Currency        Currency @relation("Transactions", fields: [currencyId], references: [id])
}

model Voucher {
  id               Int       @id @default(autoincrement())
  code             String    @db.VarChar(20)
  currencyId       Int       @map("currency_id")
  amount           Decimal   @db.Decimal(10, 2)
  expiration       DateTime
  status           String    @db.VarChar(20)
  claimedAccountId Int?      @map("claimed_account_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  claimedAt        DateTime? @map("claimed_at")

  Currency       Currency @relation("Vouchers", fields: [currencyId], references: [id])
  ClaimedAccount Account? @relation("ClaimedAccount", fields: [claimedAccountId], references: [id])
}
